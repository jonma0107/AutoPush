Dailys:
16/abril/2025:

Para KARYA: 
- Asegurando la integración del back con el front, para el requerimiento 423 del gestor de archivos, se logró que el front pueda tomar la url prefirmada y que pueda cargar el archivo al S3.
- De la reunión con Nicolás se ajustó en el back la respuesta para el metodo GET, para que el front pueda obtener la url prefirmada y al momento de listar que el usuario también pueda descaragr el archivo desde la plataforma.

PROPUESTA TÉCNICA:
- En lugar de eliminar la expiración de una url prefirmada, considerar implementar un sistema que genere nuevas URLs prefirmadas bajo demanda. Esto permite que los usuarios accedan a los archivos cuando lo necesiten, pero con un control de acceso más seguro. 

Para TRACKEUM:
- Ayer integré el modelo SupportFiles para manejar archivos de soporte con campos como nombre, tamaño, y usuario. También agregué dos endpoints: uno para listar y generar URLs prefirmadas de subida a S3, y otro para consultar, actualizar o eliminar un archivo, incluyendo la generación de la URL de acceso. Ya está listo para pruebas en el frontend.

*******************************************************************************

Dailys:
21/abril/2025:

Ya está integrado lo de soporte de archivos. Para desplegarlo en un ambiente de test

*******************************************************************************

Dailys:
22/abril/2025:

Desplegué lo de la rama del submodulo de archivos de soporte en ambiente de test de RIMAC, para lo de front le pedi a Johan desplegar también. Luego configuré en la base de datos en la tabla de navigationbar la visualización del modulo
probé con archivo pdf de más de 20 mb e hice una limpieza del código.

*************************************************************************************************************

Dailys:
22/abril/2025:

probar implementacion de trackeum

voy a desplegar en tal test, algo que no está en develop sino en la rama feature/RF
necesitamos desplegar la funcionalidad de xxxx en tal test, algo que no está en develop sino en la rama feature/RF

Pendiente Version 2 :

guardar en paquetes distintos en el S3 de acuerdo a la categoría, osea cargar en el bucket pero que se guarde en diferente carpeta según la categoría

está pendiente por confirmar si se guarda en zip

*****************************************************************************************************************

Dailys:
23/abril/2025:

trabajando en guardar en paquetes distintos en el S3 de acuerdo a la categoría, osea cargar en el bucket pero que se guarde en diferente carpeta según la categoría

*************************************************************************************************************************************************************

Dailys:
24/abril/2025:

- cree un modelo propio que define las categorías disponibles

- ForeignKey en SupportFiles que relaciona un archivo con una categoría

- modificar la forma en que se construye la key del objeto en S3

*************************************************************************************************************************************************************

Dailys:
25/abril/2025:

- mientras estaba haciendo pruebas de la fase 2, me dispuse a identificar el error que compartí en el grupo

- seguiré haciendo pruebas para comprobar que efectivamente se crean las carpetas según la categoría

*************************************************************************************************************************************************************

Dailys:
28/abril/2025:

- Al integrar con FRontEnd en Trackeum, lo del módulo de archivos de soporte:

Realicé un HALLAZGO en la función sendRequest (utils/sendRequest.js) para solucionar un problema con la subida de archivos a S3 usando URLs prefirmadas.
El Problema:
La función sendRequest siempre incluía una cabecera Authorization en todas las peticiones. Esto es correcto para nuestros endpoints privados, pero Amazon S3 rechaza explícitamente la cabecera Authorization en las peticiones POST a URLs prefirmadas (devuelve un error 400 Unsupported Authorization Type).  

********************************************************************************************************************************************************

Dailys:
29/abril/2025:

- mientras mezclaban la fase uno del módulo de archivo de soporte, ajustaba en otra rama la fase dos para que al cargarse un archivo al s3 permita al usuario elegir la categoria y en el bucket ese archivo se subiera a una carpeta con el nombre de dicha categoria

- ayude a A. Orjuela a solucionar unos errores que el pipeline le presentaba al momento de ejecutar PR de una app que está desarrollando para Karya.


- desplegué en test 

*******************************************************************************************************************

Daily:
05/ May / 2025

1. preparar pull request:
2. Revisar y tener propuesta de como podríamos trabajar: Enmascaramiento de datos de un proyecto o un test (Permiso de encriptación / anonimización de datos). Lo que quieren es una opción que devuelva enmascarada o encriptada la información en los test, y no datos reales.
3. apoyo a Wilmar Sacristan para sincronización

****************************************************************

ARREGLO DE FILTRO EN MODULO DE CARGUE MASIVO:

¿Por qué existía el método get_error?
El método get_error en el serializador de FileRequest era una lógica de negocio personalizada que:
Calculaba un "estado virtual" del archivo, basado en condiciones adicionales (por ejemplo, si el padre estaba en error, o si había errores en el archivo).
Permitía mostrar "ERROR" en la respuesta de la API aunque el valor real en la base de datos fuera otro (como "INITIATED" o "FINALIZED").

Esto podía ser útil para alertar visualmente al usuario de situaciones problemáticas, aunque el estado real no fuera "ERROR".

¿Por qué lo eliminé?
No se usa en ninguna otra parte del código (confirmado por búsqueda global).
Causaba confusión: El filtro en la API podía traer registros con status_request_file="FINALIZED", pero el serializador los mostraba como "ERROR" si se cumplían ciertas condiciones, lo que rompía la correspondencia entre lo que se filtraba y lo que se veía.

El requerimiento actual es que el filtro y la visualización sean estrictos:
Solo deben mostrarse los registros cuyo valor real en base de datos para status_request_file coincida exactamente con el filtro aplicado.

RESUMEN:
Eliminé el método get_error del serializador de FileRequest porque:
 - No se utiliza en ninguna otra parte del proyecto.
 - Su lógica sobrescribía el valor real de status_request_file en la respuesta de la API, lo que causaba inconsistencias entre el filtro aplicado y los datos mostrados al usuario.
 - El requerimiento actual es que el filtro y la visualización sean estrictos y reflejen el valor real del campo en la base de datos.
 - Si en el futuro se necesita mostrar un estado calculado o virtual, se recomienda implementarlo como un campo adicional y no sobrescribir el valor real del campo.

*******************************************************************************************************************************************


Prueba de CONCEPTO PARA TÉCNICA DE ENMASCARAMIENTO

IN PROCESS...

*******************************************************************************************************************************************

Daily 12/May/2025

Se integra una solución en api_reports (feature/api-reports-fix y en el submódulo feature/regex-validator):

Con la implementación usando los regex regex_validator y control_chars en las funciones que generan los reportes, si el usuario envía un carácter prohibido (por ejemplo, un carácter de control ASCII como el  o cualquier otro que Excel no acepte):

¿Qué sucede?
El carácter prohibido será eliminado automáticamente del dato antes de ser escrito en el archivo (ya sea CSV o Excel).
El usuario no verá ese carácter en el reporte final. El resto del texto se mantendrá igual, solo sin el carácter prohibido.

¿Por qué?
El código aplica:
regex_validator para limpiar caracteres especiales no deseados.
control_chars para eliminar todos los caracteres de control ASCII prohibidos por Excel y que pueden causar problemas en CSV.
Esto se hace antes de escribir cada celda en el archivo de salida.

¿Qué NO sucede?
No se lanza un error ni se detiene la generación del reporte.
No se notifica al usuario que su dato fue modificado (a menos que SE QUIERA implementar una lógica adicional para avisar).

Ejemplo:
Si el usuario ingresa:
"Hola\x1fMundo"
El resultado en el archivo será:
HolaMundo
El carácter \x1f (ASCII 31) se elimina.

Resumen
- El carácter prohibido se elimina automáticamente.
- No hay error ni aviso al usuario por defecto.
- El reporte se genera correctamente, pero sin los caracteres prohibidos.

Nota:
probar con Procesos

**************************************************************************************************************************

Prueba de CONCEPTO PARA TÉCNICA DE ENMASCARAMIENTO

IN PROCESS...

feature/masking

*************************************************************************************************************************

Daily 13 de Mayo

- Django está intentando acceder a una variable de entorno llamada GUPSHUP_API_KEY, pero no está definida en el entorno en el que se está ejecutando (en este caso, en AWS Lambda a través de Zappa).

- Dado que no usas requirements.txt, y trabajas solo con pyproject.toml y poetry.lock, Zappa no tomará en cuenta esas dependencias automáticamente. Por defecto, Zappa no tiene soporte nativo para Poetry.



***********************************************************************************************************************************

Daily 14 de Mayo

ToDo:

- cursor que se ejecuta y devuelve los datos

- pasarle a la libreria el json

- como estas devolviendo estos datos y mirar si ese json se puede pasar a la libreria


Hallazgo en reportes de power-bi:

- un tema de permisos desde pwbi

Trackeum:

- ajuste en la respuesta del serializador 

**********************************************************************************************************************************

Daily 16 de Mayo

- Se creó una app para generar la encriptación y desencriptación de manera administrativa.
- Evita la duplicación de encriptamiento
No encriptes IDs, llaves foráneas, ni campos de relación.
Solo encripta campos realmente sensibles y que no sean usados para búsquedas, relaciones o lógica de negocio.
Nunca debes encriptar IDs, UUIDs, llaves foráneas o campos usados para relaciones.
Si lo haces, romperás la integridad referencial y las relaciones entre tablas.


- Ambiente multitenant de Colsubsidio (adultos) 
tocó modificar un campo de un template y se solucionó compilando el template 
para que genere una nueva tabla maestra. Eso debe hacerse con un Alter de SQL

RECOMENDACIÓN
usar la secret-key con fernet, usar una parte de la secret-key


